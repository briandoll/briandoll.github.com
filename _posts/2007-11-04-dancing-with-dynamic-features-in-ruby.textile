---
layout: post
title: Dancing with dynamic features in Ruby
---

h1. {{ page.title }}

I was working on a "browse" page recently for a rails-based web application.  The page was not all that uncommon, requiring a listing of categories with a long list of subcategories.  Without getting into much detail, I'll note that each of these top-level types are represented by different models.

A particular "bad smell" emerged when seeing some repetitious code in a controller:

{% highlight ruby %}
mfgs = Manufacturer.find(:all, :select => "name")
@manufacturers = mfgs.map(&:name).join(", ")
@manufacturers_count = mfgs.length

archs = Architecture.find(:all, :select => "name")  
@architectures_count = archs.length  
@architectures = archs.map(&:name).join(", ")  
   
platforms = Platform.find(:all, :select => "name")  
@platforms_count = platforms.length  
@platforms = platforms.map(&:name).join(", ")
{% endhighlight %}

Not only does this code repeat the same pattern for each "type", but there were likely to be more types that needed to be added in.

Time for some refactoring.  "Now if only there was a way to dynamically add instance variables to an object..."

First, lets get a simple array of our types:

{% highlight ruby %}types = ["Manufacturer", "Architecture", "Platform"]{% endhighlight %}

For each type, we’ll get a handle on the class with that name:

{% highlight ruby %}types.each do |type| model = Object.const_get(type){% endhighlight %}

We’ll execute our ActiveRecord statement

{% highlight ruby %}listing = model.find(:all, :select =>"name"){% endhighlight %}

Get an array of the “name” property

{% highlight ruby %}names = listing.map(&:name);{% endhighlight %}

Now, we’ll create those instance variables on the object, the first being a comma-separated listing of the names:

{% highlight ruby %}self.instance_variable_set("@" + type, names.join(", ")){% endhighlight %}

The second being a count of the elements:

{% highlight ruby %}self.instance_variable_set("@" + type + "_count", names.length) }{% endhighlight %}

We could get into why we need those two variables (one for the list and another for the count), but I think this is a nice example of how to use instance_variable_set anyway. Ruby. Dynamic. Awesome.

The full snippet:

{% highlight ruby %}
types = ["Manufacturer", "Architecture", "Platform"]  
types.each do |type|  
  model = Object.const_get(type)  
  listing = model.find(:all, :select =>"name")  
  type = type.downcase  
  names = listing.map(&:name);  
  self.instance_variable_set("@" + type, names.join(", "))  
  self.instance_variable_set("@" + type + "_count", names.length)  
end
{% endhighlight %}